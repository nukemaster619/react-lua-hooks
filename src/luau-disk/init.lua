local setType = require(script:WaitForChild('set'):WaitForChild('type'))

export type Set<T> = setType.Set<T>

local Disk = {
    Array = {
        all = require(script:WaitForChild('array'):WaitForChild('all')),
        alternate = require(script:WaitForChild('array'):WaitForChild('alternate')),
        any = require(script:WaitForChild('array'):WaitForChild('any')),
        average = require(script:WaitForChild('array'):WaitForChild('average')),
        averageBy = require(script:WaitForChild('array'):WaitForChild('averageBy')),
        concat = require(script:WaitForChild('array'):WaitForChild('concat')),
        contains = require(script:WaitForChild('array'):WaitForChild('contains')),
        copy = require(script:WaitForChild('array'):WaitForChild('copy')),
        deduplicate = require(script:WaitForChild('array'):WaitForChild('deduplicate')),
        deduplicateByKey = require(script:WaitForChild('array'):WaitForChild('deduplicateByKey')),
        filter = require(script:WaitForChild('array'):WaitForChild('filter')),
        find = require(script:WaitForChild('array'):WaitForChild('find')),
        findIndex = require(script:WaitForChild('array'):WaitForChild('findIndex')),
        findIndexByValue = require(script:WaitForChild('array'):WaitForChild('findIndexByValue')),
        findMap = require(script:WaitForChild('array'):WaitForChild('findMap')),
        flatMap = require(script:WaitForChild('array'):WaitForChild('flatMap')),
        flatten = require(script:WaitForChild('array'):WaitForChild('flatten')),
        fromFn = require(script:WaitForChild('array'):WaitForChild('fromFn')),
        fromTryFn = require(script:WaitForChild('array'):WaitForChild('fromTryFn')),
        isArray = require(script:WaitForChild('array'):WaitForChild('isArray')),
        isEmpty = require(script:WaitForChild('array'):WaitForChild('isEmpty')),
        map = require(script:WaitForChild('array'):WaitForChild('map')),
        maximum = require(script:WaitForChild('array'):WaitForChild('maximum')),
        maximumBy = require(script:WaitForChild('array'):WaitForChild('maximumBy')),
        minimum = require(script:WaitForChild('array'):WaitForChild('minimum')),
        minimumBy = require(script:WaitForChild('array'):WaitForChild('minimumBy')),
        partition = require(script:WaitForChild('array'):WaitForChild('partition')),
        pop = require(script:WaitForChild('array'):WaitForChild('pop')),
        popFirst = require(script:WaitForChild('array'):WaitForChild('popFirst')),
        product = require(script:WaitForChild('array'):WaitForChild('product')),
        productBy = require(script:WaitForChild('array'):WaitForChild('productBy')),
        push = require(script:WaitForChild('array'):WaitForChild('push')),
        range = require(script:WaitForChild('array'):WaitForChild('range')),
        reduce = require(script:WaitForChild('array'):WaitForChild('reduce')),
        removeIndexes = require(script:WaitForChild('array'):WaitForChild('removeIndexes')),
        removeSortedIndexes = require(script:WaitForChild('array'):WaitForChild('removeSortedIndexes')),
        removeValues = require(script:WaitForChild('array'):WaitForChild('removeValues')),
        reverse = require(script:WaitForChild('array'):WaitForChild('reverse')),
        reversed = require(script:WaitForChild('array'):WaitForChild('reverse')),
        sort = require(script:WaitForChild('array'):WaitForChild('sort')),
        sortByKey = require(script:WaitForChild('array'):WaitForChild('sortByKey')),
        stepBy = require(script:WaitForChild('array'):WaitForChild('stepBy')),
        sum = require(script:WaitForChild('array'):WaitForChild('sum')),
        sumBy = require(script:WaitForChild('array'):WaitForChild('sumBy')),
        takeWhile = require(script:WaitForChild('array'):WaitForChild('takeWhile')),
        zip = require(script:WaitForChild('array'):WaitForChild('zip')),
    },
    Map = {
        copy = require(script:WaitForChild('map'):WaitForChild('copy')),
        count = require(script:WaitForChild('map'):WaitForChild('count')),
        entries = require(script:WaitForChild('map'):WaitForChild('entries')),
        invert = require(script:WaitForChild('map'):WaitForChild('invert')),
        isEmpty = require(script:WaitForChild('map'):WaitForChild('isEmpty')),
        keys = require(script:WaitForChild('map'):WaitForChild('keys')),
        mapEntries = require(script:WaitForChild('map'):WaitForChild('mapEntries')),
        mapValues = require(script:WaitForChild('map'):WaitForChild('mapValues')),
        merge = require(script:WaitForChild('map'):WaitForChild('merge')),
        remove = require(script:WaitForChild('map'):WaitForChild('remove')),
        values = require(script:WaitForChild('map'):WaitForChild('values')),
    },
    Set = {
        fromArray = require(script:WaitForChild('set'):WaitForChild('fromArray')),
    },
    None = require(script:WaitForChild('None')),
    WeakMap = require(script:WaitForChild('WeakMap')),
}

return Disk
